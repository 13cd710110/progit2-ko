[[_setting_up_server]]
=== 서버 설정하기

서버에서 설정하는 일을 살펴보자.
일단 Ubuntu같은 표준 리눅스 배포판을 사용한다고 가정한다.
사용자들은 아마도 `authorized_keys` 파일로 인증할 것이다.
먼저 `git` 계정을 만들고 사용자 홈 디렉토리에 .ssh 디렉토리를 만든다:

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

`authorized_keys` 파일에 SSH 공개키를 추가해야 사용자가 접근할 수 있다.
추가하기 전에 이미 알고있는 사람의 공개키를 받아서 가지고 있다고 가정하자.
공개키가 어떻게 생겼는지 다시 한번 확인해보자:

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

`.ssh` 디렉토리에 있는 `authorized_keys` 파일에 추가한다:

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

`--bare` 옵션을 주고 `git init`을 실행해서 Working Directory가 없는 빈 저장소를 하나 만든다.(((git commands, init, bare)))

[source,console]
----
$ cd /opt/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /opt/git/project.git/
----

이제 John씨, Josie씨, Jessica씨는 이 저장소를 리모트 저장소로 등록하고 나서 브랜치를 Push할 수 있다.
프로젝트마다 적어도 한 명은 서버에 접속하여 Bare 저장소를 만들어야 한다.
git 계정과 저장소를 만든 서버의 호스트 이름이 `gitserver`라고 하자.
만약 이 서버가 내부망에 있는 거면 `gitserver`가 그 서버를 가리키도록 DNS에 설정하면 다음과 같은 명령을 사용할 수 있다(`myproject` 프로젝트가 이미 있다고 가정하자)

[source,console]
----
# on Johns computer
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/opt/git/project.git
$ git push origin master
----

이제 이 프로젝트를 Clone하고 나서 수정하고 Push할 수 있다:

[source,console]
----
$ git clone git@gitserver:/opt/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master
----

이렇게 개발자들이 읽고 쓸 수 있는 Git 서버를 쉽게 만들 수 있다.

이 개발자들은 서버에 git 계정으로 로그인할 수 있다. 이를 막으려면 passwd 파일에서 로그인 쉘을 바꿔야한다.

단순히 로그인 쉘을 `git-shell`로 바꾸기만 하면 _git_ 계정으로는 git만 사용할 수 있도록 할 수 있다.
이 로그인 쉘은 서버의 다른 부분은 건들 수 없도록 되어있다.
`git-shell`을 사용자의 로그인 쉘로 지정한 다음 `/etc/shells`에 `git-shell`를 추가해야 한다. 다음을 보자.

[source,console]
----
$ cat /etc/shells   # see if `git-shell` is already in there.  If not...
$ which git-shell   # make sure git-shell is installed on your system.
$ sudo vim /etc/shells  # and add the path to git-shell from last command
----

`chsh <계정 이름>`명령어를 이용해서 특정 계정의 쉘을 바꿀 수 있다.

[source,console]
----
$ sudo chsh git  # and enter the path to git-shell, usually: /usr/bin/git-shell
----

이제 _git_계정은 SSH로만 Push와 Pull을 할 수 있고 서버에서 쉘을 가질 수 없다.
그냥 로그인하려고 하면 다음과 같이 로그인 불가능 메시지만 보게 될 것이다.

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

비로소 Git은 제대로 동작하면서 개발자들이 쉘을 얻지 못하게 되었다.
위의 출력에서 볼 수 있듯이 `git` 계정의 홈 디렉터리에 git-shell-commands디렉터리를 만들어 `git-shell`의 동작을 조금 바꿀 수 있다.
예를 들면 서버에서 사용할 수 있는 Git 명령어를 제한할 수 있다. 또 명령어를 실행했을 때 나오는 메시지도 변경 할 수 있다.
`git help shell`명령어를 실행해보면 Git 쉘을 꾸미는 데에 필요한 정보들을 얻을 수 있을 것이다. (((git commands, help)))
