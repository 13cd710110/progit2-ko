=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
GitWeb은 간단하게 쓰기엔 꽤 좋다.
근데 좀 더 기능이 많은 Git 서버를 쓰려면 다른 서버를 찾아 설치해야 한다.
GitLab은 널리 사용되는 서버 중 하나이다. 여기서 설치하고 사용하는 것을 예제를 통해 배워보도록 하자.
GitLab은 기능이 많은 만큼 설정도 복잡하고 유지보수를 위해 해야 할 것도 많다.

==== 설치

GitLab은 데이터베이스와 따로 연동해야하는 웹 애플리케이션이라 다른 Git 서버들보다 설치하기에 복잡하지만, 문서화가 잘 되어있으므로 이를 참고한다.

설치 방법은 여러 가지가 있다.
가상 머신 이미지나 원클릭 인스톨러를 내려받아 빨리 설치하고 환경에 맞게 후다닥 설정해서 사용할 수 있다.(((bitnami))) https://bitnami.com/stack/gitlab[]에서 내려받을 수 있다.
Bitnami는 아래와 같이 로그인 화면이 있다.(alt-&rarr; 를 눌러서 들어간다) 로그인 화면에 설치된 GitLab의 IP와 기본 아이디, 비밀번호가 써있다.

[[bitnami]]
.Bitnami GitLab 가상 머신의 로그인 화면
image::images/bitnami.png[Bitnami GitLab 가상 머신의 로그인 화면]

더 많은 것을 알고 싶다면 GitLab 커뮤니티 에디션의 readme 파일을 읽어보면 된다. https://gitlab.com/gitlab-org/gitlab-ce/tree/master[]에서 내려받을 수 있다.
Chef의 레시피나 Digital Ocean(역주: 호스팅 서비스)의 가상 머신, RPM, DEB 패키지 등에 관한 설치 방법들이 있다.
``비공식적인'' 설명서도 있다. 흔치 않은 운영체제나 데이터베이스와의 연동, 완전 수동으로 설치하는 스크립트 등 많은 주제를 다룬다.

==== 관리자

GitLab의 관리자 도구는 웹 페이지로 되어있다.
웹 브라우저로 GitLab이 설치된 곳의 주소에 들어가면 그냥 보인다. 그리고 관리자로 로그인하자.
기본 아이디는 `admin@local.host`, 비밀번호는 `5iveL!fe`이다. (이건 로그인 후에 바꿀 수 있다.)
로그인 한 후에 메뉴 오른쪽 위에 있는 ``Admin area''를 클릭한다.

[[gitlab_menu]]
.GitLab 메뉴의 ``Admin area'' 버튼
image::images/gitlab-menu.png[GitLab 메뉴의 ``Admin area'' 버튼]

===== 사용자

GitLab의 사용자 계정은 실제 사람을 상징한다.
사용자 계정의 내용은 복잡하지 않다. 로그인에 필요한 데이터에 추가로 개인 정보가 들어있을 뿐이다.
각 사용자 계정은 *네임스페이스*가 있다. 네임 스페이스는 프로젝트를 묶는 단위이다.
*jane*사용자가 *project*라는 프로젝트를 진행 중이라면 프로젝트의 URL은 http://server/jane/project[]가 될 것이다.

[[gitlab_users]]
.GitLab 사용자의 관리 화면
image::images/gitlab-users.png[GitLab 사용자의 관리 화면]

사용자를 삭제하는 방법은 두 가지가 있다.
일시적으로 GitLab에 로그인하지 못하게 하는 ``정지(Blocking)''가 있다. 사용자 데이터와 네임스페이스 안의 프로젝트 데이터들은 삭제되지 않고 그대로 있다. 정지당한 사용자의 커밋도 끊어지지 않고 연결되어있다.

하지만 사용자를 ``삭제(Destroying)''하면 그 사용자와 관련된 모든 데이터가 삭제된다.
삭제당한 사용자 네임스페이스 아래의 모든 프로젝트와 그룹들도 삭제된다.
영구히 삭제하여 되돌릴 수 없으므로 조심해서 써야 한다.

[[_gitlab_groups_section]]
===== 그룹

GitLab 그룹은 프로젝트와 그룹에 속한 사용자의 접근 권한의 모음이다.
그룹도 사용자처럼 프로젝트 네임스페이스가 있다. +training+라는 그룹이 +materials+라는 프로젝트를 가지고 있으면 URL은 http://server/training/materials[]가 된다.

[[gitlab_groups]]
.GitLab의 그룹 관리 화면
image::images/gitlab-groups.png[GitLab의 그룹 관리 화면]

그룹은 많은 사용자가 모인 곳이다. 그룹에 속한 사람들은 모두 그룹의 프로젝트와 그룹 자체에 대한 권한이 따로 있다.
권한은 ``Guest''(이슈 등록과 채팅만 할 수 있다.)부터 ``Owner''(그룹과 멤버, 프로젝트에 대한 모든 제어가 가능하다.)까지 지정할 수 있다. 
권한 종류를 여기에 나열하기엔 너무 많다. GitLab의 관리 화면에서 각 권한에 대한 링크를 참고하길 바란다.

===== 프로젝트

GitLab의 프로젝트는 간단히 이야기하면 하나의 Git 저장소다.
모든 프로젝트는 한 명의 사용자나 하나의 그룹에 속하게 된다.
사용자에 딸린 프로젝트는 사용자는 관리자로서 그 프로젝트를 완전히 제어할 수 있다. 그룹에 딸린 프로젝트라면 그룹의 사용자 권한 레벨에 따라 다를 것이다.

프로젝트마다 공개 수준을 지정하면 사람마다 프로젝트 페이지와 저장소가 보이거나 안 보일 수 있다.
프로젝트가 _Private_이라면 프로젝트 소유자가 허락한 사람들만 프로젝트에 접근할 수 있다.
_Internal_은 로그인한 사용자에게만 보인다. 그리고 _Public_ 프로젝트는 모든 사람이 볼 수 있다.
이런 공개 수준은 git ``fetch''같은 저장소 접근이나 웹 UI 접근에 다 적용된다.

===== 훅

GitLab은 프로젝트나 시스템 수준의 훅 기능도 지원한다. 
훅은 어떤 이벤트가 발생하면 어떤 JSON 데이터를 HTTP POST로 보낸다.
CI나 채팅방, 개발 도구 등을 이용해 자동화를 할 때 Git 저장소나 GitLab과 통신하기에 좋다.


==== 기본 사용법

먼저 새로운 프로젝트를 만들어보자.
툴바의 ``+'' 아이콘을 클릭한다.
네임스페이스로 사용될 프로젝트의 이름, 공개 수준을 입력한다.

지금 입력한 것은 대부분 나중에 다시 바꿀 수 있다.
``Create Project''를 클릭하면 끝난다.

프로젝트가 만들어졌으면 로컬 Git 저장소랑 연결하자.
HTTPS나 SSH 프로토콜을 이용해 프로젝트를 Git 리모트로 등록한다.
저장소 URL은 프로젝트 대문 화면 위 쪽에 있다.
아래와 같이 명령어를 이용해 로컬 저장소에 `gitlab`이라는 이름으로 리모트 저장소를 등록한다.

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

로컬 저장소가 없으면 그냥 아래 명령어를 실행한다.

[source,console]
----
$ git clone https://server/namespace/project.git
----

웹 UI는 꽤 유용하다. 저장소에 대한 각종 정보를 보여준다.
프로젝트의 대문 페이지에서는 최근 활동을 보여주고 제일 위의 링크를 클릭하면 프로젝트의 파일과 커밋 로그가 나온다.

==== 같이 일하기

같이 일할 사람에게 그냥 Git 저장소의 Push 권한을 주는 걸로 간단하게 협업을 시작할 수 있다.
프로젝트 설정 페이지에서 ``Members'' 섹션에 같이 일할 사용자를 추가한다. 그리고 그 사용자가 Push 할 수 있도록 설정한다. (다른 접근 수준에 대해서는 <<_gitlab_groups_section>>에서 볼 수 있다)
``Developer'' 이상의 권한을 주면 그 사용자는 우리 저장소에 Push 하거나 브랜치를 만들 수 있다.

Merge 요청을 하도록 설정하면 좀 더 통제권을 가지고 협업을 할 수 있다.
프로젝트에 접근할 수 있는 모든 사용자가 제한적으로 프로젝트에 기여할 수 있는 기능이다.
사용자는 마음껏 브랜치를 만들고 커밋, Push 한 다음에 이 브랜치를 `master`나 다른 브랜치에 머지해달라고 요청하게 된다.
Push 권한이 없는 사용자는 저장소를 ``fork''한 다음 ``fork''한 _자신의 저장소_에 Push 한다. 그리고는 원래 저장소에 내 저장소에 있는 브랜치를 머지해달라고 요청하면 된다.
소유자는 이걸로 자신의 저장소에 대한 모든 통제 권한을 가진다. 어떤 데이터가 들어올 수 있는지 언제 들어오는지 소유자가 결정할 수 있다.

머지 요청과 이슈는 대화의 기본 단위이다.
각 머지 요청에서는 일반적인 토론뿐만 아니라 라인 단위로 변경의 이유에 대해 대화가 이루어진다. 물론 코드 리뷰가 간단히 끝날 수도 있다.
요청과 이슈는 모두 사용자에게 할당되거나 마일스톤의 과제로 편입된다.

이 섹션에서는 GitLab의 Git 부분만 보았지만 이게 전부가 아니다. 이 외에도 프로젝트 위키나 토론 ``walls''나 시스템 관리 도구 등, 협업용 기능들이 많다.
GitLab의 장점은 일단 서버가 돌아가면 SSH로 서버에 접속할 일이 별로 없다는 것이다. 대부분 관리는 웹 브라우저로 가능하기 때문이다.
